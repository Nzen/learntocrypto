
# 180608

Bank can probably handle withdrawing funds. Which is to say, I extracted methods from Dispachee.respond() and ensured that it can do all the old stuff. However, Bios needs to become aware of the ability to withdraw. After Teller gets that ability. Rename Bios to Login (or something).

If I add a couple more response types, I'll need to refactor this with more intention. As there are 14 or whatever problems, I'll probably have plenty of opportunities. As an example, I'm tempted to add a message compatibility version, but I expect that I'll end up doing something like that later.

# 1806067

advance pom version with each branch closure

add a readme in my solution folder, so I can say dependencies

withdrawl. do I negative a deposit, jk ? what does a rejection look like ?
should I read ahead ? No.

# 180606

Ah, using a single main works. And responding on a separate thread makes this actually work.

I had links to fastjson wiki pages, but that's fine, I can get them again.

problem 02 involves the teller able to deposit to the bank. The bank will provide a sum of the deposits, preferably by using a lambda and reduce() on the list of received messages.

https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#syntax
https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html

I'm inclined to add a protocol compatibiityId, but that should be low on the list of things I can change.

# 180605

Added jar maven config, but I left it broken because I need a switch such that it will run either the server or client. Preferably, it should use a cli arg to choose which (I wonder if a teller is different from a bank user). Also add one for the tcp port.

